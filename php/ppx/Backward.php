<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace ppx;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Backward extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Backward
     */
    public static function getRootAsBackward(ByteBuffer $bb)
    {
        $obj = new Backward();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function BackwardIdentifier()
    {
        return "PPXF";
    }

    public static function BackwardBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::BackwardIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Backward
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getInput()
    {
        $obj = new Tensor();
        $o = $this->__offset(6);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getGradOutput()
    {
        $obj = new Tensor();
        $o = $this->__offset(8);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startBackward(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Backward
     */
    public static function createBackward(FlatBufferBuilder $builder, $name, $input, $grad_output)
    {
        $builder->startObject(3);
        self::addName($builder, $name);
        self::addInput($builder, $input);
        self::addGradOutput($builder, $grad_output);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(0, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addInput(FlatBufferBuilder $builder, $input)
    {
        $builder->addOffsetX(1, $input, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addGradOutput(FlatBufferBuilder $builder, $gradOutput)
    {
        $builder->addOffsetX(2, $gradOutput, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endBackward(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
