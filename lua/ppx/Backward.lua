-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: ppx

local flatbuffers = require('flatbuffers')

local Backward = {} -- the module
local Backward_mt = {} -- the class metatable

function Backward.New()
    local o = {}
    setmetatable(o, {__index = Backward_mt})
    return o
end
function Backward.GetRootAsBackward(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Backward.New()
    o:Init(buf, n + offset)
    return o
end
function Backward_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Backward_mt:Name()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function Backward_mt:Input()
    local o = self.view:Offset(6)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = require('ppx.Tensor').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Backward_mt:GradOutput()
    local o = self.view:Offset(8)
    if o ~= 0 then
        local x = self.view:Indirect(o + self.view.pos)
        local obj = require('ppx.Tensor').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Backward.Start(builder) builder:StartObject(3) end
function Backward.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(0, name, 0) end
function Backward.AddInput(builder, input) builder:PrependUOffsetTRelativeSlot(1, input, 0) end
function Backward.AddGradOutput(builder, gradOutput) builder:PrependUOffsetTRelativeSlot(2, gradOutput, 0) end
function Backward.End(builder) return builder:EndObject() end

return Backward -- return the module