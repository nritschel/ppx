// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library ppx;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class MessageBodyTypeId {
  final int value;
  const MessageBodyTypeId._(this.value);

  factory MessageBodyTypeId.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum MessageBodyTypeId');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 15;
  static bool containsValue(int value) => values.containsKey(value);

  static const MessageBodyTypeId NONE = const MessageBodyTypeId._(0);
  static const MessageBodyTypeId Handshake = const MessageBodyTypeId._(1);
  static const MessageBodyTypeId HandshakeResult = const MessageBodyTypeId._(2);
  static const MessageBodyTypeId Run = const MessageBodyTypeId._(3);
  static const MessageBodyTypeId RunResult = const MessageBodyTypeId._(4);
  static const MessageBodyTypeId Sample = const MessageBodyTypeId._(5);
  static const MessageBodyTypeId SampleResult = const MessageBodyTypeId._(6);
  static const MessageBodyTypeId Observe = const MessageBodyTypeId._(7);
  static const MessageBodyTypeId ObserveResult = const MessageBodyTypeId._(8);
  static const MessageBodyTypeId Tag = const MessageBodyTypeId._(9);
  static const MessageBodyTypeId TagResult = const MessageBodyTypeId._(10);
  static const MessageBodyTypeId Forward = const MessageBodyTypeId._(11);
  static const MessageBodyTypeId ForwardResult = const MessageBodyTypeId._(12);
  static const MessageBodyTypeId Backward = const MessageBodyTypeId._(13);
  static const MessageBodyTypeId BackwardResult = const MessageBodyTypeId._(14);
  static const MessageBodyTypeId Reset = const MessageBodyTypeId._(15);
  static get values => {0: NONE,1: Handshake,2: HandshakeResult,3: Run,4: RunResult,5: Sample,6: SampleResult,7: Observe,8: ObserveResult,9: Tag,10: TagResult,11: Forward,12: ForwardResult,13: Backward,14: BackwardResult,15: Reset,};

  static const fb.Reader<MessageBodyTypeId> reader = const _MessageBodyTypeIdReader();

  @override
  String toString() {
    return 'MessageBodyTypeId{value: $value}';
  }
}

class _MessageBodyTypeIdReader extends fb.Reader<MessageBodyTypeId> {
  const _MessageBodyTypeIdReader();

  @override
  int get size => 1;

  @override
  MessageBodyTypeId read(fb.BufferContext bc, int offset) =>
      new MessageBodyTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class DistributionTypeId {
  final int value;
  const DistributionTypeId._(this.value);

  factory DistributionTypeId.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum DistributionTypeId');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const DistributionTypeId NONE = const DistributionTypeId._(0);
  static const DistributionTypeId Normal = const DistributionTypeId._(1);
  static const DistributionTypeId Uniform = const DistributionTypeId._(2);
  static const DistributionTypeId Categorical = const DistributionTypeId._(3);
  static const DistributionTypeId Poisson = const DistributionTypeId._(4);
  static get values => {0: NONE,1: Normal,2: Uniform,3: Categorical,4: Poisson,};

  static const fb.Reader<DistributionTypeId> reader = const _DistributionTypeIdReader();

  @override
  String toString() {
    return 'DistributionTypeId{value: $value}';
  }
}

class _DistributionTypeIdReader extends fb.Reader<DistributionTypeId> {
  const _DistributionTypeIdReader();

  @override
  int get size => 1;

  @override
  DistributionTypeId read(fb.BufferContext bc, int offset) =>
      new DistributionTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Message {
  Message._(this._bc, this._bcOffset);
  factory Message(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Message> reader = const _MessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MessageBodyTypeId get bodyType => new MessageBodyTypeId.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  dynamic get body {
    switch (bodyType?.value) {
      case 1: return Handshake.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 2: return HandshakeResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 3: return Run.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 4: return RunResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 5: return Sample.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 6: return SampleResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 7: return Observe.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 8: return ObserveResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 9: return Tag.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 10: return TagResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 11: return Forward.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 12: return ForwardResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 13: return Backward.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 14: return BackwardResult.reader.vTableGet(_bc, _bcOffset, 6, null);
      case 15: return Reset.reader.vTableGet(_bc, _bcOffset, 6, null);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'Message{bodyType: $bodyType, body: $body}';
  }
}

class _MessageReader extends fb.TableReader<Message> {
  const _MessageReader();

  @override
  Message createObject(fb.BufferContext bc, int offset) => 
    new Message._(bc, offset);
}

class MessageBuilder {
  MessageBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addBodyType(MessageBodyTypeId bodyType) {
    fbBuilder.addUint8(0, bodyType?.value);
    return fbBuilder.offset;
  }
  int addBodyOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageObjectBuilder extends fb.ObjectBuilder {
  final MessageBodyTypeId _bodyType;
  final dynamic _body;

  MessageObjectBuilder({
    MessageBodyTypeId bodyType,
    dynamic body,
  })
      : _bodyType = bodyType,
        _body = body;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int bodyOffset = _body?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    fbBuilder.addUint8(0, _bodyType?.value);
    if (bodyOffset != null) {
      fbBuilder.addOffset(1, bodyOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Tensor {
  Tensor._(this._bc, this._bcOffset);
  factory Tensor(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Tensor> reader = const _TensorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<double> get data => const fb.ListReader<double>(const fb.Float64Reader()).vTableGet(_bc, _bcOffset, 4, null);
  List<int> get shape => const fb.ListReader<int>(const fb.Int32Reader()).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Tensor{data: $data, shape: $shape}';
  }
}

class _TensorReader extends fb.TableReader<Tensor> {
  const _TensorReader();

  @override
  Tensor createObject(fb.BufferContext bc, int offset) => 
    new Tensor._(bc, offset);
}

class TensorBuilder {
  TensorBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addDataOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addShapeOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TensorObjectBuilder extends fb.ObjectBuilder {
  final List<double> _data;
  final List<int> _shape;

  TensorObjectBuilder({
    List<double> data,
    List<int> shape,
  })
      : _data = data,
        _shape = shape;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int dataOffset = _data?.isNotEmpty == true
        ? fbBuilder.writeListFloat64(_data)
        : null;
    final int shapeOffset = _shape?.isNotEmpty == true
        ? fbBuilder.writeListInt32(_shape)
        : null;

    fbBuilder.startTable();
    if (dataOffset != null) {
      fbBuilder.addOffset(0, dataOffset);
    }
    if (shapeOffset != null) {
      fbBuilder.addOffset(1, shapeOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Handshake {
  Handshake._(this._bc, this._bcOffset);
  factory Handshake(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Handshake> reader = const _HandshakeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get systemName => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Handshake{systemName: $systemName}';
  }
}

class _HandshakeReader extends fb.TableReader<Handshake> {
  const _HandshakeReader();

  @override
  Handshake createObject(fb.BufferContext bc, int offset) => 
    new Handshake._(bc, offset);
}

class HandshakeBuilder {
  HandshakeBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addSystemNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HandshakeObjectBuilder extends fb.ObjectBuilder {
  final String _systemName;

  HandshakeObjectBuilder({
    String systemName,
  })
      : _systemName = systemName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int systemNameOffset = fbBuilder.writeString(_systemName);

    fbBuilder.startTable();
    if (systemNameOffset != null) {
      fbBuilder.addOffset(0, systemNameOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class HandshakeResult {
  HandshakeResult._(this._bc, this._bcOffset);
  factory HandshakeResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HandshakeResult> reader = const _HandshakeResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get systemName => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get modelName => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'HandshakeResult{systemName: $systemName, modelName: $modelName}';
  }
}

class _HandshakeResultReader extends fb.TableReader<HandshakeResult> {
  const _HandshakeResultReader();

  @override
  HandshakeResult createObject(fb.BufferContext bc, int offset) => 
    new HandshakeResult._(bc, offset);
}

class HandshakeResultBuilder {
  HandshakeResultBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addSystemNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addModelNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HandshakeResultObjectBuilder extends fb.ObjectBuilder {
  final String _systemName;
  final String _modelName;

  HandshakeResultObjectBuilder({
    String systemName,
    String modelName,
  })
      : _systemName = systemName,
        _modelName = modelName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int systemNameOffset = fbBuilder.writeString(_systemName);
    final int modelNameOffset = fbBuilder.writeString(_modelName);

    fbBuilder.startTable();
    if (systemNameOffset != null) {
      fbBuilder.addOffset(0, systemNameOffset);
    }
    if (modelNameOffset != null) {
      fbBuilder.addOffset(1, modelNameOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Run {
  Run._(this._bc, this._bcOffset);
  factory Run(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Run> reader = const _RunReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'Run{}';
  }
}

class _RunReader extends fb.TableReader<Run> {
  const _RunReader();

  @override
  Run createObject(fb.BufferContext bc, int offset) => 
    new Run._(bc, offset);
}

class RunObjectBuilder extends fb.ObjectBuilder {

  RunObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class RunResult {
  RunResult._(this._bc, this._bcOffset);
  factory RunResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RunResult> reader = const _RunResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Tensor get result => Tensor.reader.vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'RunResult{result: $result}';
  }
}

class _RunResultReader extends fb.TableReader<RunResult> {
  const _RunResultReader();

  @override
  RunResult createObject(fb.BufferContext bc, int offset) => 
    new RunResult._(bc, offset);
}

class RunResultBuilder {
  RunResultBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addResultOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RunResultObjectBuilder extends fb.ObjectBuilder {
  final TensorObjectBuilder _result;

  RunResultObjectBuilder({
    TensorObjectBuilder result,
  })
      : _result = result;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int resultOffset = _result?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (resultOffset != null) {
      fbBuilder.addOffset(0, resultOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Sample {
  Sample._(this._bc, this._bcOffset);
  factory Sample(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Sample> reader = const _SampleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get address => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  DistributionTypeId get distributionType => new DistributionTypeId.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  dynamic get distribution {
    switch (distributionType?.value) {
      case 1: return Normal.reader.vTableGet(_bc, _bcOffset, 10, null);
      case 2: return Uniform.reader.vTableGet(_bc, _bcOffset, 10, null);
      case 3: return Categorical.reader.vTableGet(_bc, _bcOffset, 10, null);
      case 4: return Poisson.reader.vTableGet(_bc, _bcOffset, 10, null);
      default: return null;
    }
  }
  bool get control => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, true);
  bool get replace => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'Sample{address: $address, name: $name, distributionType: $distributionType, distribution: $distribution, control: $control, replace: $replace}';
  }
}

class _SampleReader extends fb.TableReader<Sample> {
  const _SampleReader();

  @override
  Sample createObject(fb.BufferContext bc, int offset) => 
    new Sample._(bc, offset);
}

class SampleBuilder {
  SampleBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addAddressOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDistributionType(DistributionTypeId distributionType) {
    fbBuilder.addUint8(2, distributionType?.value);
    return fbBuilder.offset;
  }
  int addDistributionOffset(int offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addControl(bool control) {
    fbBuilder.addBool(4, control);
    return fbBuilder.offset;
  }
  int addReplace(bool replace) {
    fbBuilder.addBool(5, replace);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SampleObjectBuilder extends fb.ObjectBuilder {
  final String _address;
  final String _name;
  final DistributionTypeId _distributionType;
  final dynamic _distribution;
  final bool _control;
  final bool _replace;

  SampleObjectBuilder({
    String address,
    String name,
    DistributionTypeId distributionType,
    dynamic distribution,
    bool control,
    bool replace,
  })
      : _address = address,
        _name = name,
        _distributionType = distributionType,
        _distribution = distribution,
        _control = control,
        _replace = replace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int addressOffset = fbBuilder.writeString(_address);
    final int nameOffset = fbBuilder.writeString(_name);
    final int distributionOffset = _distribution?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (addressOffset != null) {
      fbBuilder.addOffset(0, addressOffset);
    }
    if (nameOffset != null) {
      fbBuilder.addOffset(1, nameOffset);
    }
    fbBuilder.addUint8(2, _distributionType?.value);
    if (distributionOffset != null) {
      fbBuilder.addOffset(3, distributionOffset);
    }
    fbBuilder.addBool(4, _control);
    fbBuilder.addBool(5, _replace);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class SampleResult {
  SampleResult._(this._bc, this._bcOffset);
  factory SampleResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SampleResult> reader = const _SampleResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Tensor get result => Tensor.reader.vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'SampleResult{result: $result}';
  }
}

class _SampleResultReader extends fb.TableReader<SampleResult> {
  const _SampleResultReader();

  @override
  SampleResult createObject(fb.BufferContext bc, int offset) => 
    new SampleResult._(bc, offset);
}

class SampleResultBuilder {
  SampleResultBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addResultOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SampleResultObjectBuilder extends fb.ObjectBuilder {
  final TensorObjectBuilder _result;

  SampleResultObjectBuilder({
    TensorObjectBuilder result,
  })
      : _result = result;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int resultOffset = _result?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (resultOffset != null) {
      fbBuilder.addOffset(0, resultOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Observe {
  Observe._(this._bc, this._bcOffset);
  factory Observe(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Observe> reader = const _ObserveReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get address => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  DistributionTypeId get distributionType => new DistributionTypeId.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  dynamic get distribution {
    switch (distributionType?.value) {
      case 1: return Normal.reader.vTableGet(_bc, _bcOffset, 10, null);
      case 2: return Uniform.reader.vTableGet(_bc, _bcOffset, 10, null);
      case 3: return Categorical.reader.vTableGet(_bc, _bcOffset, 10, null);
      case 4: return Poisson.reader.vTableGet(_bc, _bcOffset, 10, null);
      default: return null;
    }
  }
  Tensor get value => Tensor.reader.vTableGet(_bc, _bcOffset, 12, null);

  @override
  String toString() {
    return 'Observe{address: $address, name: $name, distributionType: $distributionType, distribution: $distribution, value: $value}';
  }
}

class _ObserveReader extends fb.TableReader<Observe> {
  const _ObserveReader();

  @override
  Observe createObject(fb.BufferContext bc, int offset) => 
    new Observe._(bc, offset);
}

class ObserveBuilder {
  ObserveBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addAddressOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDistributionType(DistributionTypeId distributionType) {
    fbBuilder.addUint8(2, distributionType?.value);
    return fbBuilder.offset;
  }
  int addDistributionOffset(int offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ObserveObjectBuilder extends fb.ObjectBuilder {
  final String _address;
  final String _name;
  final DistributionTypeId _distributionType;
  final dynamic _distribution;
  final TensorObjectBuilder _value;

  ObserveObjectBuilder({
    String address,
    String name,
    DistributionTypeId distributionType,
    dynamic distribution,
    TensorObjectBuilder value,
  })
      : _address = address,
        _name = name,
        _distributionType = distributionType,
        _distribution = distribution,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int addressOffset = fbBuilder.writeString(_address);
    final int nameOffset = fbBuilder.writeString(_name);
    final int distributionOffset = _distribution?.getOrCreateOffset(fbBuilder);
    final int valueOffset = _value?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (addressOffset != null) {
      fbBuilder.addOffset(0, addressOffset);
    }
    if (nameOffset != null) {
      fbBuilder.addOffset(1, nameOffset);
    }
    fbBuilder.addUint8(2, _distributionType?.value);
    if (distributionOffset != null) {
      fbBuilder.addOffset(3, distributionOffset);
    }
    if (valueOffset != null) {
      fbBuilder.addOffset(4, valueOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class ObserveResult {
  ObserveResult._(this._bc, this._bcOffset);
  factory ObserveResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ObserveResult> reader = const _ObserveResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'ObserveResult{}';
  }
}

class _ObserveResultReader extends fb.TableReader<ObserveResult> {
  const _ObserveResultReader();

  @override
  ObserveResult createObject(fb.BufferContext bc, int offset) => 
    new ObserveResult._(bc, offset);
}

class ObserveResultObjectBuilder extends fb.ObjectBuilder {

  ObserveResultObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Tag {
  Tag._(this._bc, this._bcOffset);
  factory Tag(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Tag> reader = const _TagReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get address => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  Tensor get value => Tensor.reader.vTableGet(_bc, _bcOffset, 8, null);

  @override
  String toString() {
    return 'Tag{address: $address, name: $name, value: $value}';
  }
}

class _TagReader extends fb.TableReader<Tag> {
  const _TagReader();

  @override
  Tag createObject(fb.BufferContext bc, int offset) => 
    new Tag._(bc, offset);
}

class TagBuilder {
  TagBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addAddressOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TagObjectBuilder extends fb.ObjectBuilder {
  final String _address;
  final String _name;
  final TensorObjectBuilder _value;

  TagObjectBuilder({
    String address,
    String name,
    TensorObjectBuilder value,
  })
      : _address = address,
        _name = name,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int addressOffset = fbBuilder.writeString(_address);
    final int nameOffset = fbBuilder.writeString(_name);
    final int valueOffset = _value?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (addressOffset != null) {
      fbBuilder.addOffset(0, addressOffset);
    }
    if (nameOffset != null) {
      fbBuilder.addOffset(1, nameOffset);
    }
    if (valueOffset != null) {
      fbBuilder.addOffset(2, valueOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class TagResult {
  TagResult._(this._bc, this._bcOffset);
  factory TagResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TagResult> reader = const _TagResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'TagResult{}';
  }
}

class _TagResultReader extends fb.TableReader<TagResult> {
  const _TagResultReader();

  @override
  TagResult createObject(fb.BufferContext bc, int offset) => 
    new TagResult._(bc, offset);
}

class TagResultObjectBuilder extends fb.ObjectBuilder {

  TagResultObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Forward {
  Forward._(this._bc, this._bcOffset);
  factory Forward(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Forward> reader = const _ForwardReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<Tensor> get arguments => const fb.ListReader<Tensor>(Tensor.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Forward{name: $name, arguments: $arguments}';
  }
}

class _ForwardReader extends fb.TableReader<Forward> {
  const _ForwardReader();

  @override
  Forward createObject(fb.BufferContext bc, int offset) => 
    new Forward._(bc, offset);
}

class ForwardBuilder {
  ForwardBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addArgumentsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ForwardObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final List<TensorObjectBuilder> _arguments;

  ForwardObjectBuilder({
    String name,
    List<TensorObjectBuilder> arguments,
  })
      : _name = name,
        _arguments = arguments;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int argumentsOffset = _arguments?.isNotEmpty == true
        ? fbBuilder.writeList(_arguments.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (argumentsOffset != null) {
      fbBuilder.addOffset(1, argumentsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class ForwardResult {
  ForwardResult._(this._bc, this._bcOffset);
  factory ForwardResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ForwardResult> reader = const _ForwardResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Tensor> get values => const fb.ListReader<Tensor>(Tensor.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'ForwardResult{values: $values}';
  }
}

class _ForwardResultReader extends fb.TableReader<ForwardResult> {
  const _ForwardResultReader();

  @override
  ForwardResult createObject(fb.BufferContext bc, int offset) => 
    new ForwardResult._(bc, offset);
}

class ForwardResultBuilder {
  ForwardResultBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addValuesOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ForwardResultObjectBuilder extends fb.ObjectBuilder {
  final List<TensorObjectBuilder> _values;

  ForwardResultObjectBuilder({
    List<TensorObjectBuilder> values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int valuesOffset = _values?.isNotEmpty == true
        ? fbBuilder.writeList(_values.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (valuesOffset != null) {
      fbBuilder.addOffset(0, valuesOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Backward {
  Backward._(this._bc, this._bcOffset);
  factory Backward(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Backward> reader = const _BackwardReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<Tensor> get arguments => const fb.ListReader<Tensor>(Tensor.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Backward{name: $name, arguments: $arguments}';
  }
}

class _BackwardReader extends fb.TableReader<Backward> {
  const _BackwardReader();

  @override
  Backward createObject(fb.BufferContext bc, int offset) => 
    new Backward._(bc, offset);
}

class BackwardBuilder {
  BackwardBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addArgumentsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BackwardObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final List<TensorObjectBuilder> _arguments;

  BackwardObjectBuilder({
    String name,
    List<TensorObjectBuilder> arguments,
  })
      : _name = name,
        _arguments = arguments;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int argumentsOffset = _arguments?.isNotEmpty == true
        ? fbBuilder.writeList(_arguments.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (argumentsOffset != null) {
      fbBuilder.addOffset(1, argumentsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class BackwardResult {
  BackwardResult._(this._bc, this._bcOffset);
  factory BackwardResult(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BackwardResult> reader = const _BackwardResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Tensor> get values => const fb.ListReader<Tensor>(Tensor.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'BackwardResult{values: $values}';
  }
}

class _BackwardResultReader extends fb.TableReader<BackwardResult> {
  const _BackwardResultReader();

  @override
  BackwardResult createObject(fb.BufferContext bc, int offset) => 
    new BackwardResult._(bc, offset);
}

class BackwardResultBuilder {
  BackwardResultBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addValuesOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BackwardResultObjectBuilder extends fb.ObjectBuilder {
  final List<TensorObjectBuilder> _values;

  BackwardResultObjectBuilder({
    List<TensorObjectBuilder> values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int valuesOffset = _values?.isNotEmpty == true
        ? fbBuilder.writeList(_values.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (valuesOffset != null) {
      fbBuilder.addOffset(0, valuesOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Reset {
  Reset._(this._bc, this._bcOffset);
  factory Reset(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Reset> reader = const _ResetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'Reset{}';
  }
}

class _ResetReader extends fb.TableReader<Reset> {
  const _ResetReader();

  @override
  Reset createObject(fb.BufferContext bc, int offset) => 
    new Reset._(bc, offset);
}

class ResetObjectBuilder extends fb.ObjectBuilder {

  ResetObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Normal {
  Normal._(this._bc, this._bcOffset);
  factory Normal(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Normal> reader = const _NormalReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Tensor get mean => Tensor.reader.vTableGet(_bc, _bcOffset, 4, null);
  Tensor get stddev => Tensor.reader.vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Normal{mean: $mean, stddev: $stddev}';
  }
}

class _NormalReader extends fb.TableReader<Normal> {
  const _NormalReader();

  @override
  Normal createObject(fb.BufferContext bc, int offset) => 
    new Normal._(bc, offset);
}

class NormalBuilder {
  NormalBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addMeanOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStddevOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NormalObjectBuilder extends fb.ObjectBuilder {
  final TensorObjectBuilder _mean;
  final TensorObjectBuilder _stddev;

  NormalObjectBuilder({
    TensorObjectBuilder mean,
    TensorObjectBuilder stddev,
  })
      : _mean = mean,
        _stddev = stddev;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int meanOffset = _mean?.getOrCreateOffset(fbBuilder);
    final int stddevOffset = _stddev?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (meanOffset != null) {
      fbBuilder.addOffset(0, meanOffset);
    }
    if (stddevOffset != null) {
      fbBuilder.addOffset(1, stddevOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Uniform {
  Uniform._(this._bc, this._bcOffset);
  factory Uniform(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Uniform> reader = const _UniformReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Tensor get low => Tensor.reader.vTableGet(_bc, _bcOffset, 4, null);
  Tensor get high => Tensor.reader.vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'Uniform{low: $low, high: $high}';
  }
}

class _UniformReader extends fb.TableReader<Uniform> {
  const _UniformReader();

  @override
  Uniform createObject(fb.BufferContext bc, int offset) => 
    new Uniform._(bc, offset);
}

class UniformBuilder {
  UniformBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addLowOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHighOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UniformObjectBuilder extends fb.ObjectBuilder {
  final TensorObjectBuilder _low;
  final TensorObjectBuilder _high;

  UniformObjectBuilder({
    TensorObjectBuilder low,
    TensorObjectBuilder high,
  })
      : _low = low,
        _high = high;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int lowOffset = _low?.getOrCreateOffset(fbBuilder);
    final int highOffset = _high?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (lowOffset != null) {
      fbBuilder.addOffset(0, lowOffset);
    }
    if (highOffset != null) {
      fbBuilder.addOffset(1, highOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Categorical {
  Categorical._(this._bc, this._bcOffset);
  factory Categorical(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Categorical> reader = const _CategoricalReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Tensor get probs => Tensor.reader.vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Categorical{probs: $probs}';
  }
}

class _CategoricalReader extends fb.TableReader<Categorical> {
  const _CategoricalReader();

  @override
  Categorical createObject(fb.BufferContext bc, int offset) => 
    new Categorical._(bc, offset);
}

class CategoricalBuilder {
  CategoricalBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addProbsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CategoricalObjectBuilder extends fb.ObjectBuilder {
  final TensorObjectBuilder _probs;

  CategoricalObjectBuilder({
    TensorObjectBuilder probs,
  })
      : _probs = probs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int probsOffset = _probs?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (probsOffset != null) {
      fbBuilder.addOffset(0, probsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Poisson {
  Poisson._(this._bc, this._bcOffset);
  factory Poisson(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Poisson> reader = const _PoissonReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Tensor get rate => Tensor.reader.vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Poisson{rate: $rate}';
  }
}

class _PoissonReader extends fb.TableReader<Poisson> {
  const _PoissonReader();

  @override
  Poisson createObject(fb.BufferContext bc, int offset) => 
    new Poisson._(bc, offset);
}

class PoissonBuilder {
  PoissonBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addRateOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PoissonObjectBuilder extends fb.ObjectBuilder {
  final TensorObjectBuilder _rate;

  PoissonObjectBuilder({
    TensorObjectBuilder rate,
  })
      : _rate = rate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int rateOffset = _rate?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (rateOffset != null) {
      fbBuilder.addOffset(0, rateOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
